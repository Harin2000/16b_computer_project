// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Not(in=instruction[15], out=c1);
    Mux16(a=outMloop, b=instruction ,sel=c1 ,out=o1 );
    Or(a=c1,b=instruction[5],out=c2);
    ARegister(in=o1 ,load=c2 ,out[0..14]=addressM,out=addressMloop );
    Mux16(a= addressMloop,b= inM,sel=instruction[12] ,out=o2 );
    ALU(x= dreg,y=o2 ,zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] ,no=instruction[6] ,out=outM,out=outMloop ,zr=zr ,ng=ng );
    And(a=instruction[15], b=instruction[4],out=c4);
    DRegister(in=outMloop,load=c4,out=dreg);
    Not(in=zr,out=zrb);
    Not(in=ng,out=ngb);
    Or(a=zr,b=ng,out=zrong);
    And(a=zrb,b=ngb,out=m1);
    Mux(a=false ,b=m1 ,sel=instruction[0] ,out=mo0 );
    Mux(a=zr ,b=ngb ,sel=instruction[0] ,out=mo1 );
    Mux(a=ng ,b=zrb ,sel=instruction[0] ,out=mo2 );
    Mux(a=zrong ,b=true ,sel=instruction[0] ,out=mo3 );
    Mux(a=mo0 ,b=mo1 ,sel=instruction[1] ,out=mo4 );
    Mux(a=mo2 ,b=mo3 ,sel=instruction[1] ,out=mo5 );
    Mux(a=mo4 ,b=mo5 ,sel=instruction[2] ,out=c5p1 );
    And(a=c5p1,b=instruction[15], out=c5);
    PC(in=addressMloop ,load=c5 ,inc=true ,reset=reset ,out[0..14]=pc );
    And(a=instruction[15],b=instruction[3],out=writeM);
    
}